// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	logr "github.com/go-logr/logr"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CheckProjectExist provides a mock function with given fields: port, idrsa, host, appName, logger
func (_m *Client) CheckProjectExist(port int32, idrsa string, host string, appName string, logger logr.Logger) (bool, error) {
	ret := _m.Called(port, idrsa, host, appName, logger)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, string, string, string, logr.Logger) (bool, error)); ok {
		return rf(port, idrsa, host, appName, logger)
	}
	if rf, ok := ret.Get(0).(func(int32, string, string, string, logr.Logger) bool); ok {
		r0 = rf(port, idrsa, host, appName, logger)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int32, string, string, string, logr.Logger) error); ok {
		r1 = rf(port, idrsa, host, appName, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: port, idrsa, host, appName, logger
func (_m *Client) CreateProject(port int32, idrsa string, host string, appName string, logger logr.Logger) error {
	ret := _m.Called(port, idrsa, host, appName, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(int32, string, string, string, logr.Logger) error); ok {
		r0 = rf(port, idrsa, host, appName, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetHeadToBranch provides a mock function with given fields: port, idrsa, host, appName, branchName, logger
func (_m *Client) SetHeadToBranch(port int32, idrsa string, host string, appName string, branchName string, logger logr.Logger) error {
	ret := _m.Called(port, idrsa, host, appName, branchName, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(int32, string, string, string, string, logr.Logger) error); ok {
		r0 = rf(port, idrsa, host, appName, branchName, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
